<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Change Box]]></title>
  <link href="http://ZhangHanDong.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ZhangHanDong.github.com/"/>
  <updated>2012-03-14T15:04:16+08:00</updated>
  <id>http://ZhangHanDong.github.com/</id>
  <author>
    <name><![CDATA[blackanger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Edge - 使用Rails来做API-Only App]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/03/12/shi-yong-railslai-zuo-api-only-app/"/>
    <updated>2012-03-12T16:03:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/03/12/shi-yong-railslai-zuo-api-only-app</id>
    <content type="html"><![CDATA[<h4>原文地址:  <a href="https://github.com/rails/rails/blob/efd557a60cd976ac17be9e238111a551599caeb5/railties/guides/source/api_app.textile">点这里</a> 或者 <a href="http://edgeguides.rubyonrails.org/api_app.html">这里Edge Guides</a></h4>

<p><strong> 本文并非原文翻译 </strong></p>

<hr />

<h2>这个导读你会学到：</h2>

<ul>
<li><p>什么是仅提供API的Rails应用</p></li>
<li><p>开始如何配置没有任何浏览器特性的Rails</p></li>
<li><p>如何选择你想包含的middlewares</p></li>
<li><p>如何选择你的controller里使用哪个modules</p></li>
</ul>


<p><strong> 注意： 这个导读引入的特性并没有被全部实现。 先当文档来看 </strong></p>

<h2>什么是一个API app？</h2>

<p>传统意义上来说， 当人们说他用了Rails实现了一个“API”， 意味着他们的web应用提供一个程序可访问的API接口。就像Github提供的<a href="http://developer.github.com/">这个API</a>， 你可以在你自己定制的客户端来使用它。</p>

<p>随着移动互联网时代的到来，以及各种客户端框架的出现， 越来越多的开发者使用Rails来构建后端， 供Web应用和本地应用(Native App)一起使用。例如， Twitter就在Web Application中和其他本地应用客户端（Native App）一样，都消耗着由自己的<a href="https://dev.twitter.com/">公共API</a>提供的JSON资源,  而不是通过Rails生成动态的HTML来渲染用于和Server端通信的表单和链接。大多少开发者都把Web应用当作由HTML， CSS， Javascript构成的另一种客户端来处理，只是通过JSON来通信。</p>

<!--more-->


<h2>为什么使用Rails来提供JSON APIs？</h2>

<p>很多人在使用Rails构建一个JSON API时候思考的第一个问题就是：使用Rails输出JSON是不是有种杀鸡用牛刀的感觉？ 是不是应该用Siantra这类轻量级的框架就好了？</p>

<p>对于简单的API应用， 这些考虑可能适用， 但是复杂的， Rails更适合。</p>

<p>大多数人使用Rails的原因是它提供了默认的套件帮助我们快速的起步不用在烦杂的琐碎的东西上浪费时间。让我们看看适合API应用使用的东西：</p>

<h4>中间件层</h4>

<ul>
<li>Reloading:   R
ails应用支持transparent reloading. 不管是你的应用因为新增了文件变大还是重启了server，它都会工作。</li>
<li>Development Mode: 开发模式。</li>
<li>Test Mode:    测试模式。</li>
<li>Logging:   Rails会详细的记录每次请求的日志信息。开发环境下， Rails记录的信息包含请求的环境，数据库查询和基本的性能等信息。</li>
<li>Security:  Rails有效的防范<a href="http://en.wikipedia.org/wiki/IP_address_spoofing">IP欺诈</a>和<a href="http://en.wikipedia.org/wiki/Timing_attack">时序攻击</a>.</li>
<li>Parameter Parsing:  想要指定你的参数是JSON来代替URL编码字符串吗？没问题， Rails会帮你解码JSON成为你可用的参数。</li>
<li>Conditional GETs:   Rails可以处理条件GET， 操作请求头并且返回正确的响应头和状态码。你可以使用<a href="http://api.rubyonrails.org/classes/ActionController/ConditionalGet.html#method-i-stale-3F">stale?</a>来处理全部HTTP详细信息。</li>
<li>Caching:   Rails让你方便的配置缓存。</li>
<li>HEAD requests:   Rails会透明的把HEAD request转化为GET request， 并只返回header信息。</li>
</ul>


<h4>ActionPack层</h4>

<ul>
<li>Resourceful Routing:  如果你正在构建一个RESTFul的JSON API， 你要用Rails router,   干净利落方便的帮你从HTTP方法映射到Controller。</li>
<li>URL Generation:   Routing对应的是URL Generation。 一个好的API是对HTTP方法友好的URLs， 例如<a href="http://developer.github.com/v3/gists/">Github gist API</a>。</li>
<li>Header and Redirection Responses:    head :no_content 和 redirect_to_user_url(current_user), 这两方法迟早有用。</li>
<li>Content Negotiation: Rails的respond_to和respond_with方法，会自动的根据请求的Accept header和可用类型去提供相应的MIME Type。</li>
<li>Caching:  Rails提供页面， action和片段缓存。 片段缓存有利用构建内嵌的JSON对象。</li>
<li>Basic, Digest and Token Authentication:  Rails支持这三种类型的HTTP验证。</li>
<li>Instrumentation: Rails3.0 提供了一个Instrumentation API用于触发一些注册事件，类似于action处理过程， 发送文件或者数据， 重定向和数据查询等事件,  可用于Notifications等功能。</li>
<li>Generators:  生成器， 对高级别的Rails用户来说没啥用， 但是它可以一键生成相关的资源。</li>
<li>Plugins:   有好多优秀的Rails第三方插件可以拿来用。</li>
</ul>


<h2>基本配置</h2>

<p>如果你正在构建一个基本只提供API服务的Rails应用， 那么你可以从一个定制的Rails子集版本开始， 只添加自己需要的特性。</p>

<h4>你可以直接生成一个bare rails应用：</h4>

<pre><code>$ rails new my_api  -api
</code></pre>

<p>这条命令会帮你生成三条主要的部分：</p>

<ol>
<li>帮你配置包含更少中间件的应用， 尤其是不包含任何和浏览器相关的特性，比如cookie支持等。</li>
<li>使 ApplicationController继承于ApplicationController::API， 而不是ApplicationController::Base.  ApplicationController::API已经剔除了任何包含浏览器相关特性的功能。</li>
<li>配置生成器， 在你生成新的资源的时候，跳过生成views， helpers和assets。</li>
</ol>


<h4>如果你想让已经存在的Rails Application变成一个API App， 那么按下面步骤来做：</h4>

<p><strong> 在config/application.rb中增加下面两行：</strong></p>

<pre><code>config.middleware.api_only!
config.generators.api_only!
</code></pre>

<p><strong> 改变app/controller/application_controller.rb 为下列语句： </strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  # ...</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>选择中间件</h2>

<p>一个API A
pp应该默认包含下面Middlewares：</p>

<ul>
<li>Rack::Cache:   利用Cache-Control机制来缓存响应。</li>
<li>Rack::Sendfile:   提供文件传输支持。</li>
<li>Rack::Lock:  如果你的应用没有标记使用线程安全 (config.threadsafe!), 这个middleware会在你的请求上增加一个互斥锁， 用于保证在任一时刻，只能有一个线程访问改对象。</li>
<li>ActionDispatch::RequestId:</li>
<li>Rails::Rack::Logger:</li>
<li>ActionDispatch::ShowExceptions:</li>
<li>ActionDispatch::DebugExceptions:</li>
<li>ActionDispatch::RemoteIp: IP欺诈保护</li>
<li>ActionDispatch::Reloader: 在开发环境下支持code reloading。</li>
<li>ActionDispatch::ParamsParser: 根据请求类型Content-Type来解析XML, YAML, JSON。</li>
<li>ActionDispatch::Head:  指派HEAD requests为GET requests,并只返回header信息和状态码。</li>
<li>Rack::ConditionalGet:  在Rails controller里支持stale?特性</li>
<li>Rack::ETag:  自动为所有的字符串响应设置ETag。 主要被用来优化客户端。</li>
</ul>


<h4>你可以通过下面命令来列出你应用里用到的所有Middlewares：</h4>

<pre><code>$ rake middleware
</code></pre>

<p>还有一些其他的Middlewares及其说明， 可以查看<a href="https://github.com/rails/rails/blob/efd557a60cd976ac17be9e238111a551599caeb5/railties/guides/source/api_app.textile">原文链接</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solr简要指南]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/03/07/solrjian-yao-zhi-nan/"/>
    <updated>2012-03-07T14:38:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/03/07/solrjian-yao-zhi-nan</id>
    <content type="html"><![CDATA[<h2>一、 安装</h2>

<p>服务器环境， CentOS, 需要的软件有：  jdk 1.6.0 、apache-solr-3.1.0 、apache-tomcat-7.0.26 、 mmseg4j</p>

<h4>Solr与Sphinx相比较的优势：</h4>

<ul>
<li><p> Solr 可以精确控制对索引进行局部更新，而Sphinx只能全局更新.</p></li>
<li><p> Solr 可以对几乎任何对象进行索引，该对象甚至可以不是ActiveRecord.而Sphinx和RDBMS耦合过于紧密.</p></li>
<li><p> Solr 索引的对象ID可以非空或者是字符串，而Sphinx要求被索引对象必须拥有非0整数作为ID.</p></li>
<li><p> Solr 支持Boolean作为查询条件搜索,更加方便</p></li>
<li><p> Solr 支持Facets,而Sphinx为此需要做更多工作</p></li>
<li><p> Solr 是对lucene的包装。所以他可以享受lucene每次升级带来的便利。</p></li>
</ul>


<!--more-->


<h4>安装Java：</h4>

<pre><code>sudo yum install java-1.6.0-openjdk.x86_64
</code></pre>

<h4>下载Solr和Tomcat</h4>

<pre><code>1. wget  http://labs.renren.com/apache-mirror/tomcat/tomcat-7/v7.0.26/bin/apache-tomcat-7.0.26.tar.gz

2. wget http://mirror.bjtu.edu.cn/apache/lucene/solr/3.1.0/apache-solr-3.1.0.tgz
</code></pre>

<p> 下载完之后解压并放到/usr/local下:</p>

<pre><code> tar zxvf apache-solr-3.1.0.tgz
 tar zxvf apache-tomcat-7.0.26.tar.gz
 mv  apache-solr-3.1.0 /usr/local/solr
 mv  apache-tomcat-7.0.26 /usr/local/tomcat
</code></pre>

<h4>下载mmseg4j， 中文分词用。</h4>

<pre><code> 地址： http://code.google.com/p/mmseg4j/downloads/list
</code></pre>

<h2>二、 配置</h2>

<h4>配置环境变量</h4>

<p>编辑profile文件：</p>

<pre><code>sudo vi /etc/profile
</code></pre>

<p>添加内容:</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/jre-1.6.0
export CLASSPATH=.:$JAVA_HOME/lib/rt.jar
export PATH=$PATH:$JAVA_HOME/bin
export TOMCAT_HOME=/usr/local/tomcat
export JAVA_OPT="$JAVA_OPTS -Dsolr.solr.home=/usr/local/tomcat/solr_home"
</code></pre>

<h4>复制solr.war到tomcat/webapps下面</h4>

<pre><code>cp /usr/local/solr/dist/apache-solr-3.1.0.war /usr/local/tomcat/webapps/solr.war
</code></pre>

<h4>配置solr.xml文件，先创建Catalina/localhost目录：</h4>

<p>编辑文件：</p>

<pre><code> vi /usr/local/tomcat/conf/Catalina/localhost/solr.xml
</code></pre>

<p>添加内容：</p>

<pre><code>&lt;Context docBase="/usr/local/tomcat/webapps/solr.war" debug="0" crossContext="true"&gt;

    &lt;Environment name="solr/home" type="java.lang.String" value="/usr/local/tomcat/solr_home" override="true" /&gt;

&lt;/Context&gt;
</code></pre>

<h4>配置tomcat user</h4>

<p>编辑文件：</p>

<pre><code>vi /usr/local/tomcat/conf/tomcat-users.xml
</code></pre>

<p>去掉注释块,加入以下内容:</p>

<pre><code>&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;
&lt;user username="tomcat" password="123456" roles="manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui"/&gt;
</code></pre>

<p><strong>注意： 这里tomcat/123456 是tomcat的用户名，密码， 在你访问tomcat管理页面的时候需要。</strong></p>

<h4>进入tomcat根目录:</h4>

<p>创建solr_home文件夹. 然后将/usr/local/solr/example/solr下的conf、data、bin三个文件夹复制到solr_home下;</p>

<h4>进入webapps/solr/WEB-INF，打开web.xml，第37行，注释打开，修改如下：</h4>

<pre><code>&lt;env-entry]]]]&gt;  
   &lt;env-entry-name]]]]&gt;solr/home&lt;/env-entry-name]]]]&gt;  
   &lt;env-entry-value]]]]&gt;/usr/local/tomcat/solr_home&lt;/env-entry-value]]]]&gt;  
   &lt;env-entry-type]]]]&gt;java.lang.String&lt;/env-entry-type]]]]&gt;  
 &lt;/env-entry]]]]&gt;
</code></pre>

<h4>解压下载好的mmseg4j-1.8.4.zip:</h4>

<p>复制mmseg4j-all-1.8.4.jar到/usr/local/tomcat/webapps/solr/WEB-INF/lib下</p>

<h4>进入/usr/local/tomcat/solr_home/conf，打开schema.xml, 在<types></types>之间加入：</h4>

<pre><code>&lt;fieldType name="textComplex" class="solr.TextField" ]]&gt;  
&lt;analyzer]]&gt;  
    &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="complex" dicPath="data/"/&gt;  
&lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;  
&lt;fieldType name="textMaxWord" class="solr.TextField" ]]&gt;  
        &lt;analyzer]]&gt;  
           &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="max-word"dicPath="data/"/&gt;  
        &lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;  
&lt;fieldType name="textSimple" class="solr.TextField" ]]&gt;  
        &lt;analyzer]]&gt;  
           &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="simple" dicPath="data/"/&gt;  
       &lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;
</code></pre>

<h4>然后在解压好的mmseg4j文件夹中找到data文件夹</h4>

<p>将其内的chars.dic、units.dic、words.dic三个字典文件复制到/usr/local/tomcat/solr_home/data中</p>

<h4>启动tomcat</h4>

<pre><code>/usr/local/tomcat/bin/startup.sh
</code></pre>

<p><strong>当然你也可以自己写启动脚本</strong></p>

<h4>检测</h4>

<p>访问 http://localhost:8080/manager/status  输入之前的用户名和密码，就可以看到正常的tomcat首页，然后访问http://localhost:8080/solr/admin/analysis.jsp，选择Field下拉选项中的type，后面输入textComplex，然后在Field value中随便复制一段中文文字，点击Analyz，就可以看到mmseg4j的分词结果了。</p>

<h4>配置 solrconfig.xml ,   打开 /usr/local/tomcat/solr_admin/conf/solrconfig.xml :</h4>

<pre><code> &lt;dataDir&gt;${solr.data.dir:/usr/local/tomcat/solr_home/data}&lt;/dataDir&gt;
</code></pre>

<p>添加auto_commit配置， 找到<updateHandler class="solr.DirectUpdateHandler2">位置， 打开注释：</p>

<pre><code>&lt;autoCommit&gt; 
    &lt;maxDocs&gt;10000&lt;/maxDocs&gt;
    &lt;maxTime&gt;1000&lt;/maxTime&gt; 
&lt;/autoCommit&gt;
</code></pre>

<p><strong>说明：</strong></p>

<ul>
<li><p>maxDocs：当内存索引数量达到指定值的时候，将内存的索引DUMP到硬盘中，并通知searcher类加载新的索引。</p></li>
<li><p>maxTime:每隔指定的时间段，自动的COMMIT内存中的索引数据，并通知Searcher类加载新的索引。</p></li>
<li><p>以上两种方式，以最先达到条件执行为准。</p></li>
</ul>


<h2>三、 Rails</h2>

<h4><a href="http://sunspot.github.com/">Sunspot</a></h4>

<h4><a href="https://github.com/outoftime/sunspot/tree/master/sunspot_rails">sunspot_rails</a></h4>

<h4>与Model集成示例：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>post.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Post &amp;lt;&amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  has_many :links&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">searchable</span> <span class="ss">:auto_index</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:auto_remove</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;text :ab  #可以被fulltext或者keywords搜索出来。btw,ywords是fulltext的别名。其实是同一个方法。</span>
</span><span class='line'><span class="sr">string :location</span>
</span><span class='line'><span class="sr">integer :blog_id</span>
</span><span class='line'><span class="sr">boolean :generated   #支持boolean查询</span>
</span><span class='line'><span class="sr">time :published_at, :stored =&amp;gt; true</span>
</span><span class='line'><span class="sr">text :links do   # 支持这种虚拟属性。</span>
</span><span class='line'><span class="sr">  links.map { |link| link.url + &quot; &quot; + link.title }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> 请留意auto_index,auto_remove,配置了这两个选项以后，程序就能够自动检测程序，数据是否变得脏了。数据脏又分为dirty?和delete_dirty?,自动方式会自动根据这两种脏脏状态决定是否自动更新索引,还是自动删除。如果这两个选项被设置成false,那么就需要你手动更新索引。 </strong></p>

<h4>增量更新：</h4>

<p><strong> sunspot会将新增、更新的记录发送至solr，但不会发送commit(只有运行reindex才会发送commit命令,  只有commit之后， 索引才会发生变化)， 可以配置 solr/conf/solrconfig.xml ，启用 autoCommit 参数，设置更新的记录数或者时间(ms)， 更新时如果 solr 服务出问题，则会导致rails操作不成功，所以要把更新操作放到resque后台执行， 这里使用<a href="http://stdout.heyzap.com/2011/08/17/sunspot-resque-session-proxy/">Sunspot-Resque Session Proxy</a> </strong></p>

<h4>关于solr中commit和optimize的概念:</h4>

<pre><code>-    commit

   当你像solr提交索引更新时，只有运行了commit，索引才会发生变化。              
   当然也并不意味着你每次提交都要commit，如果不是那么紧急，你可以多次提交之后，再执行commit操作。

-   optimize

   optimize有点像硬盘上整理磁盘碎片的操作。       
   为了提高搜索速度，它会将索引重组在一起，然后移除需要被删除删除或是更新的文档，请注意，solr是没有update的这种操作的，只有增加与删除。       
   solr在优化时，将需要删除或是被替换的索引标记为deleted，然后再创建新的文档替换掉需要被替换的。optimize就是执行此操作。       
   所以在优化的时候，你的索引会增大，然后再减小。optimize操作会创建一个全新的的索引结构，所以，你需要预备出2倍于你commit时索引大小的空间。
</code></pre>

<h2>参考资料：</h2>

<p> <a href="http://wiki.apache.org/solr/SolrTomcat">SolrTomcat Wiki</a></p>

<p> <a href="http://asciicasts.com/episodes/278-search-with-sunspot">Episodes 278</a></p>

<p> <a href="http://stdout.heyzap.com/2011/08/17/sunspot-resque-session-proxy/">Sunspot-Resque Session Proxy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bcrypt与密码安全]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/01/05/bcryptyu-mi-ma-an-quan/"/>
    <updated>2012-01-05T17:30:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/01/05/bcryptyu-mi-ma-an-quan</id>
    <content type="html"><![CDATA[<p>最近闹的沸沸扬扬的各大网站用户密码泄露事件， 让网民们震惊了，尽然都是明文保存密码。因为存在某些漏洞，比如sql注入， 可能让Hacker拿到全字段的数据列表，如果是明文密码， 那就帮Hacker省事了， Hacker都不需要暴力破解了。</p>

<p>其实对于密码有很多加密手段，但是最安全的莫过于Bcrypt这种算法了， 详细的参看<a href="http://codahale.com/how-to-safely-store-a-password/">Coda Hala的这篇文章</a>, 也有<a href="http://coolshell.cn/articles/2078.html/comment-page-2#comment-121752">中文版</a>。 其实安全也是相对的， 对于Bcrypt这种算法的优势再于它的慢， 延缓了Hacker暴力破解的时间， 对于用户来说，就相对安全了。</p>

<p>用Rails的同学就有福了。 <a href="https://github.com/plataformatec/devise">devise</a>默认就是支持Bcrypt的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>initializers/devise.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">stretches</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的stretches被用来做work factor, 数值越大越慢， 如果你发现一个crypt生成值在20毫秒之内，那这个stretches就正好。</p>

<p>另一个措施就是可以在用户输入12345之类的弱密码的时候，禁止其注册，并提示其使用强度比较高的密码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 使用小记]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2011/12/21/octopress-shi-yong-xiao-ji/"/>
    <updated>2011-12-21T23:05:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2011/12/21/octopress-shi-yong-xiao-ji</id>
    <content type="html"><![CDATA[<p>我是从<a href="ruby5.envylabs.com%20Ruby5">Ruby5</a>知道<a href="http://octopress.org/%20Octopress">Octopress</a>的， 之前用rack-Jekyll自己搞过一个blog， 使用起来比较麻烦。看了一下Octopress的文档， 觉得非常棒。 看到<a href="http://blog.xdite.net">Xdite</a>也在推荐使用这个blog系统，也对它感兴趣了。</p>

<p>没费多少时间把它搭建起来了，绑定了blog.changebox.me这个域名。 changebox.me这个域名我买了有一段时间了， 本来想做个养成习惯的web应用， 因为某些原因耽搁了。 现在暂时用来写博吧。</p>

<p>对Octopress感兴趣的同学可以去其<a href="http://octopress.org/%20Octopress">官网</a>看看。</p>
]]></content>
  </entry>
  
</feed>
