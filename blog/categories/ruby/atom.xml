<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Change Box]]></title>
  <link href="http://ZhangHanDong.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ZhangHanDong.github.com/"/>
  <updated>2012-04-24T17:22:38+08:00</updated>
  <id>http://ZhangHanDong.github.com/</id>
  <author>
    <name><![CDATA[blackanger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby的并发世界]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/04/24/rubyde-bing-fa-shi-jie/"/>
    <updated>2012-04-24T17:10:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/04/24/rubyde-bing-fa-shi-jie</id>
    <content type="html"><![CDATA[<p>这是我去年翻译的一篇旧文，放到thinkinweb.heroku.com上面， 现在搬过来。</p>

<hr />

<p><strong>注： 并发给我们的应用带来并行能力，而线程是实现并发的一种方式。Ruby的GIL限制了Ruby的多线程并发能力。</strong></p>

<p><strong>原文</strong>在<a href="http://merbist.com/2011/02/22/concurrency-in-ruby-explained/">这里</a>： 翻译过程中省略了一些废话。</p>

<hr />

<p>&nbsp; &nbsp; &nbsp; &nbsp;并发无疑不是一个新问题。但是随着多核时代的到来，web流量的剧增，一些新的技术出现，貌似更好，因为他们能更好的处理并性。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;并发就是多任务，可以这么理解。当人们谈论他们想要并发，意思就是他们想要代码在同一时间做多个不同的事情。当你用电脑的时候，你并不希望必须得在浏览网站和听音乐间二选一，你当然愿意二者可以并发进行了！一个道理，如果你有一个web服务，你当然不想一个进程每次只能处理一个请求吧。本文的目标是用尽可能简单的解释ruby的并发理论。 这是一个复杂的主题以及包含不同的并发实现方案。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;我们期望我们的代码有更好的性能，更快。让我们以2个简单具体的例子来说明并发。首先，我们假设你在写一个twitter客户端， 你可能想让用户当有新消息获取到的时候自动更新他/她的消息列表（tweets）。 要实现这个功能，一个通用的解决方案就是使用多个线程(Threads). 我们用一个线程去循环消息列表，另一个线程向远程Twitter API发起请求。2个线程共享同一片内容，所以一旦Twitter API线程获取了数据，就可以马上显示到页面上。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;第二个例子是webserver. 假设你的rails应用可能多于1QPS(每秒查询/请求数)，你衡量你应用的平均应答时间大概是100ms。那么你的rails用一个独立的进程可以处理10QPS( 1秒1000ms , 100ms一个来回，那就是10QPS) 但是当你的应用每秒得到了大于10个请求数会如何呢？ 其实也没啥，请求将会等待知道超时。 这就是为什么我们想提高我们的并发处理能力了。这里有很多不同的方法去实现它。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;很多人对这些不同的解决方案有不同的争议，但是他们从来没有说明过，为什么他们不喜欢其中一种方案，或者是觉得这种方案比那种好。 你可能经常听到人们讨论，类似于这样的话题： Rails can’t scale, 你只能使用 JRuby, threads suck 来得到并发， 唯一的并发处理是通过线程，我们应该选择 Erlang/Node.js/Scala, 使用 fibers可能更好，增加多台机器， 以及 forking > threading.  以上这些言论经常在twitter，blog上说的多了，所以你可能开始相信这些人的话了。但是你真的理解人们为什么那么说吗？你确信他们说的就是对的？</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;真相就是，这是个很复杂的问题， 还好，它还不是太复杂。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;有件事你必须要记住，你所使用的语言已经定义好了并性模型。 在java里， threading is the usual solution， 如果你想在你的java应用里去实现并发处理，只需要在它自己的线程里运行独立的请求。在php里， 每个请求都会启动一个新的进程。 两者都有优缺点， 优点是，java线程方法共享内存，所以你可以节省内存。php的优点是，你不用去担心锁，死锁，线程安全编码和隐藏于线程背后的所有混乱。描述的如此简单，但是你可能会想，为什么php没有线程，而java就不能用多个进程？ 这其实和语言的设计有关。php是为web而创的语言， php代码应该很快的被加载，不用太多的内存。java代码启动慢，还占用很大内存。java是一种通用的编程语言，而不是专门为web设计的。另一些编程语言比如Erlang和Scala都使用第三种方法： the actor model （角色模型）。 角色模型有点混合以上2种方案的模型，所不同的是，角色模型是一个不共享相同内存上下文的线程。actors直接的通信是通过交换信息，确保每个actor处理它自己的状态，从而避免损坏数据（2个线程同时修改同一数据，但是一个actor在同时接受2个信息）。 我们会在之后讨论这个设计模式，所以如果感到困惑，请不必担心。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;那么Ruby怎么样呢？Ruby开发者是不是使用线程，多进程，actors，其他？ 答案是：Yes!</p>

<h2>Threads 线程</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;从1.9版开始，Ruby有了本地线程（之前是green threads）。 所以，如果我们愿意，我们完全可以像大多数的java开发者一样，随时随地的使用线程。但问题是，Ruby像Python那样使用了一个Global Interpreter Lock(aka GIL).这个GIL是一个保护数据完整性的锁机制。GIL每次只允许数据被一个线程修改，因此不让线程损坏数据，也不允许其真正的并发运行。这就是为什么有些人说，Ruby和Python并不具备真正的并发性。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;然而这些人们通常并没有提及， GIL使单线程程序更快， 多线程程序更易于开发，因为数据结构是安全的，还有许多c扩展是非线程安全，没有GIL这些c扩展就不那么循规蹈矩了。这些论据并没有说服大家，这就是为什么你会听到有些人说，你应该去看看另一些没有GIL的ruby实现，像什么JRuby, Rubinius(hydra分支)或者是MacRuby(Rubinius &amp;&amp; MacRuby也提供另一种并发方式)。如果你用一个没有GIL的实现， 那么用ruby的线程实际和java的优缺点差不多了。但是，这也意味着，现在你又掉入了处理线程的噩梦中：需要确定你数据安全性， 不能死锁，检查代码，库文件，插件和gems是不是都是线程安全的。此外，运行过多的线程可能会影响性能，因为你的操作系统并没有足够的资源分配，它最终会将时间耗费在上下文的切换上。剩下的就由你自己来看是否值得在你的项目使用多线程了。</p>

<h2>Multiple processes &amp; forking 多进程&amp;forking</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;这是使用Ruby和Python使用并发最常用的解决方案。因为默认的语言并没有能力实现真正的并发，或者因为你想避免线程编程的挑战，你可能想去开启更多的进程。如果你并不想在进程间共享状态，这是很容易的。 如果你想这样做的话，就需要去用DRb, 一个像RabbitMQ那样的消息站，或者是一个像Memcached那样的共享数据存储系统，又或者是数据库。需要说明的是，你现在需要使用大量的内存。如果你想运行5个Rails进程，并且你的应用使用100Mb, 那么你需要500Mb， 这可是很大的内存。这实际是发生在当你使用类似于Mongrel这样的web服务器时候的事实。现在另一些服务器，像Passenger和Unicorn发现另一种方式， 他们依赖unix forking。 这种unix环境写时拷贝实现的forking的优势在于，创建一个新的主进程的copy，并且时共享相同的物理内存。 然而，每个进程也能修改它自己的内存，并不会影响其他进程。所以，Passenger一个进程能加载100Mb的Rails应用，然后fork这个进程5次， 总共只占用内存100多点Mb，并且你可以并行的去处理5倍的请求。这里注意，如果你在请求进程代码里分配内存，你的总内存将会增长，但是你仍然可以在内存用尽之前运行更多的进程。这种方式因其简单和安全而受人关注。 如果一个forked进程瞎捣蛋或者引起内存泄露，我们只需要删除它，然后创建个新的fork进程就ok了。 注意，这种方式也被应用于Resque, 一个异步job进程解决方案。</p>

<h2>Actors/Fibers 角色/纤程</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;之前我们谈到过Actor Model. 从Ruby1.9开始， 开发者又多了一个轻量级的线程，叫Fibers(纤程)。 Fibers不是一个角色(Actors)， Ruby也没有实现本地角色模型（Actors Model）,但是有些人基于fibers写了一些actor库。一个fiber像一个简单线程，只是它是基于语言级别的，并非虚拟机实现。Fibers就像一个block， 但是他们又可以暂停，可以回收。 Fibers比线程更快，且更省内存，看这个blog的示例（http://oldmoe.blogspot.com/2008/08/ruby-fibers-vs-ruby-threads.html）。然而， 因为GIL， 你仍然不能在线程里真正的运行并发纤程。如果你想用多个cup核心，你可能需要运行多线程的运行纤程。所以， 纤程对并发有何帮助呢？ 答案就是，他们是一个更大的解决方案的一部分。 Fiber允许开发者手工的控制调度“并发”代码，而且纤程本身也有代码在自动的调度其自身。这很棒，因为你现在可以用它自己的纤程包装一个web请求，告诉它返回一个response。同时， 你还可以继续处理下一个请求。每当一个fiber内部的请求被完成，它会自动的回收并且退出。听起来不错吧？那么，唯一的问题是， 如果你在一个纤程中，做任何类型的阻塞io操作，那么整个线程就会被阻塞，导致其他纤程也无法允许。诸如数据库/memcached查询， http请求，等等基本上你可能从控制器触发的任何东西，都会引起阻塞操作。好消息是，这个仅有的问题已经被解决， 就是要避免阻塞的IO。让我们看看这是如何做到的。</p>

<h2>Non blocking IOs/Reactor pattern. 非阻塞IOs/Reactor 模式</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;去理解reactor模式那真的是相当简单。阻塞IO的繁重工作委托给一个外部服务（reactor）, 这个服务可以接受并发请求。 这个服务是一个回调处理器，根据响应的类型异步的触发事件。 让我做一个有限的比喻来说明这个更好的设计。 它有点像这样： 如果你问某人一个很难的问题， 他需要一段时间才能答复你，但是他的答复会让你决定举不举你的旗。你有两个选择，或者你选择等待，然后依据等到的结果举起旗，或者你的举旗逻辑已经被定义了，你只需要告诉他，什么样的答案是举旗，什么答案是不举旗，然后让他自己去做，然后你继续做你的事情， 而不必在那傻等了。第二种方式实际上就是reactor模式。它明显有点复杂， 但是关键的一点是， 它允许你的代码去定义基于响应去调用的methods/blocks。 这一点对于单线程webserver十分重要。 当一个请求来了，并且你的代码执行了数据库查询，你正在阻塞其他任何请求。为了避免这样， 我们可以包装我们的请求成为一个fiber， 触发一个异步的DB调用，暂停纤程，以便在我们等待db返回结果的过程中，另一个请求可以得到处理，一旦，db查询返回， 它就唤醒纤程， 然后给客户端返回响应。技术上讲，这个服务仍然是一次发送一个响应，但是现在是运行在了平行的纤程上，也不会被处理大量的阻塞操作阻塞主线程。</p>

<p>&nbsp; &nbsp; &nbsp; &nbsp;这种方式被Twisted, EventMachine和Node.js所采用。Ruby开发者用EventMachine 或者是一个基于EventMachine的webserver，像Thin，和EM clients/drivers一样好的去处理异步非阻塞调用。得到Fiber的爱，你就能进入Ruby的并发世界。不过要小心的使用thin，非阻塞驱动和Rails的线程安全模式并不是意味着你可以处理并发请求。Thin/EM仅仅使用了一个线程，你需要让它知道，它可以正确处理下个请求。这是通过延迟响应（http://eventmachine.rubyforge.org/EventMachine/Deferrable.html）来实现的，而且需要让reactor知道它。 这种方法最明确的问题是， 它会迫使你改变写代码的方式。你需要设置一堆callbacks，理解Fiber的语法， 并且要用延迟响应。 我不得不说，这是一种的痛！如果你看一些Node.js的代码，你会看到，它并不总是那么优雅。</p>

<h2>Conclusion 总结</h2>

<p>&nbsp; &nbsp; &nbsp; &nbsp;综上所述， Ruby的高并发是可以实现的。但是真正的问题是什么？Ruby的GIL未来是什么？ 我们应该移除它吗？其他的Ruby实现似乎相信如此，但是Rails仍然有一个mutex锁机制来限制一次只能处理一个请求。原因是因为有许多人都不写线程安全的代码，并且许多插件也不是线程安全的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Styleguide]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/04/11/ruby-styleguide/"/>
    <updated>2012-04-11T11:34:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/04/11/ruby-styleguide</id>
    <content type="html"><![CDATA[<h4>注： 本文为<a href="https://github.com/styleguide/ruby">Github Ruby Styleguide</a>的中文翻译， 边翻译边过了一遍，发现这些风格约定很有其道理。推荐！</h4>

<h4>代码风格 (Coding Style)</h4>

<hr />

<ul>
<li>使用两个空格来保持缩进</li>
<li>每行应该小于80个字符（<em>Texmate和sublime text2 都可以设置</em>）</li>
<li>末尾不要留空格</li>
<li><p>在操作符前后， 逗号后面， 冒号和分号前后留空格。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>  <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;Hi&#39;</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">e</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>在(和[后面, 或者]和)前面不能有空格。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">some</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span><span class="o">.</span><span class="n">other</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>case和when应该保持同样的缩进深度.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">case</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">song</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;Misty&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &#39;Not again!&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  when song.duration &gt; 120</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &#39;Too long!&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  when Time.now.hour &gt; 21</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;It&#39;s too late&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;song.play</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  # another style</span>
</span><span class='line'><span class="sr">  kind = case year</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;     when 1850..1889 then &#39;Blues&#39;</span>
</span><span class='line'><span class="sr">     when 1890..1909 then &#39;Ragtime&#39;</span>
</span><span class='line'><span class="sr">     when 1910..1929 then &#39;New Orleans Jazz&#39;</span>
</span><span class='line'><span class="sr">     when 1930..1939 then &#39;Swing&#39;</span>
</span><span class='line'><span class="sr">     when 1940..1950 then &#39;Bebop&#39;</span>
</span><span class='line'><span class="sr">     else &#39;Jazz&#39;</span>
</span><span class='line'><span class="sr">     end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<!--more-->


<ul>
<li><p>使用空行来隔离区分一个方法内部的逻辑。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;data = initialize(options)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">data.manipulate!</span>
</span><span class='line'>
</span><span class='line'><span class="sr">data.result</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>   <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<h4>文档 (Documentation)</h4>

<hr />

<p><strong> 最好使用<a href="http://tomdoc.org/">TomDoc</a>来规范你的文档格式 </strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Public: Duplicate some text an arbitrary number of times.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># text  - The String to be duplicated.</span>
</span><span class='line'>  <span class="c1"># count - The Integer number of times to duplicate the text.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># Examples</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   multiplex(&#39;Tom&#39;, 4)</span>
</span><span class='line'>  <span class="c1">#   # =&gt; &#39;TomTomTomTom&#39;</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># Returns the duplicated String.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">multiplex</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;text * count</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>语法 (Syntax)</h4>

<hr />

<ul>
<li>当在def方法不接受任何参数的时候省略括号。 当有参数的时候， 使用括号。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">some_method_with_arguments</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不要使用For.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # bad</span>
</span><span class='line'><span class="sr">  for elem in arr do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">elem</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  arr.each { |elem| puts elem }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在if/unless语句中不要用then.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">some_condition</span> <span class="k">then</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">some_condition</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在条件极其琐碎比较多的情况下应该避免三元操作符(?:)， 但是单行条件的情况下是可以用三元操作符的。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="k">then</span> <span class="n">something</span> <span class="k">else</span> <span class="n">something_else</span> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  result = some_condition ? something : something_else</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不要嵌套使用三元操作符(?:), 要用if/unless语句分开。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">some_condition</span> <span class="p">?</span> <span class="p">(</span><span class="n">nested_condition</span> <span class="p">?</span> <span class="n">nested_something</span> <span class="p">:</span> <span class="n">nested_something_else</span><span class="p">)</span> <span class="p">:</span> <span class="n">something_else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  if some_condition&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">nested_condition</span> <span class="p">?</span> <span class="n">nested_something</span> <span class="p">:</span> <span class="n">nested_something_else</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;something_else</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>禁止使用and和or, 要使用 &amp;&amp;和||</li>
<li>避免多行的三元操作符(?:)， 用if/unless语句代替</li>
<li>单行语句的情况下，使用如下形式:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">some_condition</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;do_something</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="n">do_something</span> <span class="k">if</span> <span class="n">some_condition</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>禁止在unless语句中使用else。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">success?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &#39;failure&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s1">&#39;success&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  if success?&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s1">&#39;success&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &#39;failure&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>if/unless/while语句后面的条件不要用括号包上， 除非这个条件里面有赋值运算。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># ok</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">next_value</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# body omitted</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>单行的blocks要用{...}代替do...end， 在多行blocks下面应该用do...end. 在流程控制和方法定义方面应总是使用 do...end ， 有方法链式调用情况下应该使用{...}</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Bozhidar&quot;</span><span class="p">,</span> <span class="s2">&quot;Steve&quot;</span><span class="p">,</span> <span class="s2">&quot;Sarah&quot;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  names.each { |name| puts name }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">names</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts name</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="n">names</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;S&quot;</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # bad</span>
</span><span class='line'><span class="sr">  names.select do |name|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">name</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;S&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在不需要的地方避免使用return。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">some_arr</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;return some_arr.size</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">some_arr</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;some_arr.size</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>当方法的参数中设置默认值的时候， 在=操作符前后使用空格。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">arg1</span><span class="o">=</span><span class="ss">:default</span><span class="p">,</span> <span class="n">arg2</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">arg3</span><span class="o">=[]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# do something...</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span><span class="p">(</span><span class="n">arg1</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">,</span> <span class="n">arg2</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">arg3</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# do something...</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>条件中使用了赋值操作符应该用括号包围。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># good - shows intented use of assignment</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/foo/</span><span class="p">))</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # bad</span>
</span><span class='line'><span class="sr">  if v = array.grep(/</span><span class="n">foo</span><span class="o">/</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # also good - shows intended use of assignment and has correct precedence.</span>
</span><span class='line'><span class="sr">  if (v = self.next_value) == &quot;hello&quot; ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>用 ||= 来初始化变量.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># set name to Bozhidar, only if it&#39;s nil or false</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">||=</span> <span class="s1">&#39;Bozhidar&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不要用 ||= 去初始化boolean型变量。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad - would set enabled to true even if it was false</span>
</span><span class='line'>  <span class="n">enabled</span> <span class="o">||=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  enabled = true if enabled.nil?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>不要使用Perl式的特殊变量（像$0-9, $, 等）。 应该使用比较长的，就像 $PROGRAM_NAME.</li>
<li>在方法名和括号之间不要有空格。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">f</span> <span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  f(3 + 2) + 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>如果方法的第一个参数是括号， 那么这个方法总是应该使用括号。就像 f((3 + 2) + 1) 这样。</p></li>
<li><p>使用 _ 符号来表示不使用的block参数。</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  result = hash.map { |_, v| v + 1 }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>命名 (Naming)</h4>

<hr />

<ul>
<li>为方法和变量使用蛇形 snake_case</li>
<li>为类和模块使用骆驼形 CamelCase (HTTP,RFC,XML 应该大写)</li>
<li>自定义的常量使用全大写蛇形 SCREAMING_SNAKE_CASE</li>
<li>断言类方法（返回boolean值）的命名应该以问号结尾。就像 Array#empty?</li>
<li>有潜在‘危险’的方法（修改self或者是参数，类似于 exit! 这样的）， 应该以叹号结尾!. 这类方法叫Bang method.</li>
</ul>


<h4>类 (Classes)</h4>

<hr />

<ul>
<li>避免使用类变量 @@variables，因为他们在继承中表现的比较猥亵。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Parent</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@class_var = &#39;parent&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.print_class_var</span>
</span><span class='line'><span class="sr">  puts @@class_var</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Child</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Parent</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@class_var = &#39;child&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Parent</span><span class="o">.</span><span class="n">print_class_var</span> <span class="c1"># =&gt; will print &quot;child&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>一个父类的类变量在其继承体系的所有类里面都是共用的，类实例变量@class_vers, 才是per-class的， 当我们使用的时候， 优先选用类实例变量。</p>

<ul>
<li>使用 def self.method 来定义单例方法(singleton methods)， 这样会使重构的时候更加方便。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">TestClass</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# bad</span>
</span><span class='line'><span class="sr">def TestClass.some_method</span>
</span><span class='line'><span class="sr">  # body omitted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># good</span>
</span><span class='line'><span class="sr">def self.some_other_method</span>
</span><span class='line'><span class="sr">  # body omitted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>避免使用 class &lt;&lt; self ， 除非是必须的， 比如单独的accessors和aliased属性。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">TestClass</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# bad</span>
</span><span class='line'><span class="sr">class &amp;lt;&amp;lt; self</span>
</span><span class='line'><span class="sr">  def first_method</span>
</span><span class='line'><span class="sr">    # body omitted</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def second_method_etc</span>
</span><span class='line'><span class="sr">    # body omitted</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># good</span>
</span><span class='line'><span class="sr">class &amp;lt;&amp;lt; self</span>
</span><span class='line'><span class="sr">  attr_accessor :per_page</span>
</span><span class='line'><span class="sr">  alias_method :nwo, :find_by_name_with_owner</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.first_method</span>
</span><span class='line'><span class="sr">  # body omitted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.second_method_etc</span>
</span><span class='line'><span class="sr">  # body omitted</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>public, protected, 和 private 应该和方法定义缩进一样， 并且在其上方留一空行。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">SomeClass</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def public_method</span>
</span><span class='line'><span class="sr">  # ...</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'><span class="sr">def private_method</span>
</span><span class='line'><span class="sr">  # ...</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>异常 (Exceptions)</h4>

<hr />

<ul>
<li>不要用异常来控制流程</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;n /</span> <span class="n">d</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">rescue</span> <span class="no">ZeroDivisionError</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Cannot divide by 0!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">d</span><span class="o">.</span><span class="n">zero?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Cannot divide by 0!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">n</span> <span class="o">/</span> <span class="n">d</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>避免rescuing Exception这个类。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# an exception occurs here</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  rescue&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># exception handling</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # still bad</span>
</span><span class='line'><span class="sr">  begin&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># an exception occurs here</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">rescue</span> <span class="no">Exception</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# exception handling</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>关于异常处理，推荐 Exceptional Ruby这本书。</p>

<h4>集合 (Collections)</h4>

<hr />

<ul>
<li>当你需要字符串数组的时候，最好使用%w</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="no">STATES</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;draft&#39;</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;closed&#39;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  STATES = %w(draft open closed)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>当需要处理唯一元素的时候，使用Set来代替Array, Set是无重复值的无序集合。它既包含Array的运算功能,同时又兼有Hash的高速搜索功能。</li>
<li>使用符号类型来代替字符串型来作为Hash的keys。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;three&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  hash = { one: 1, two: 2, three: 3 }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>字符串 (Strings)</h4>

<hr />

<ul>
<li>使用#{}来代替字符串+连接</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="n">email_with_name</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s1">&#39; &amp;lt;&#39;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">+</span> <span class="s1">&#39;&gt;&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  email_with_name = &quot;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="sr"> &amp;lt;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="sr">&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>如果不需要转义什么特殊字符什么的， 应该用单引号</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Bozhidar&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  name = &#39;Bozhidar&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>当需要构建大的数据块的时候应该避免使用String#+方法， 应该使用 String#&lt;&lt; , 这个方法比String#+快。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># good and also fast</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s1">&#39;&lt;h1&gt;Page title&lt;/h1&gt;&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  paragraphs.each do |paragraph|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">html</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;&amp;lt;p&amp;gt;</span><span class="si">#{</span><span class="n">paragraph</span><span class="si">}</span><span class="s2">&amp;lt;/p&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>正则表达式 (Regular Expressions)</h4>

<hr />

<ul>
<li>使用named groups （只支持Ruby1.9+）</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span><span class="sr"></span>
</span><span class='line'><span class="sr">  /(regexp)/</span> <span class="o">=~</span> <span class="n">string</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">process</span> <span class="vg">$1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # good</span>
</span><span class='line'><span class="sr">  /</span><span class="p">(?</span><span class="o">&lt;</span><span class="n">meaningful_var</span><span class="o">&gt;</span><span class="n">regexp</span><span class="p">)</span><span class="o">/</span> <span class="o">=~</span> <span class="n">string</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">process</span> <span class="n">meaningful_var</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(下面说明和代码是我自己加的内容：)
你可以定义每一部分的正则，然后命名成组，并且在后面加上
{0}，表明不获取匹配内容，然后在使用\g引用对用的组，组成
大的正则，并且加上/x修饰。这样比较复杂的正则，会有更好的可读性。。另一部分示例代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="sx">%w{&lt;br/&gt;</span>
</span><span class='line'><span class="sx">   alice:10.23.52.112:true&lt;br/&gt;</span>
</span><span class='line'><span class="sx">   bob:192.168.10.34:false&lt;br/&gt;</span>
</span><span class='line'><span class="sx"> }</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; user_regexp = %r{&lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">(?</span><span class="o">&lt;</span><span class="n">username</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="n">z</span><span class="o">]+</span> <span class="p">){</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">(?</span><span class="o">&lt;</span><span class="n">ip_number</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span> <span class="p">){</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">(?</span><span class="o">&lt;</span><span class="n">ip_address</span><span class="o">&gt;</span> <span class="p">(\</span><span class="n">g</span><span class="o">&lt;</span><span class="n">ip_number</span><span class="o">&gt;.</span><span class="p">){</span><span class="mi">3</span><span class="p">}\</span><span class="n">g</span><span class="o">&lt;</span><span class="n">ip_number</span><span class="o">&gt;</span> <span class="p">){</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">(?</span><span class="o">&lt;</span><span class="n">admin</span><span class="o">&gt;</span> <span class="kp">true</span> <span class="o">|</span> <span class="kp">false</span> <span class="p">){</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">\</span><span class="n">g</span><span class="o">&lt;</span><span class="n">username</span><span class="o">&gt;</span><span class="p">:\</span><span class="n">g</span><span class="o">&lt;</span><span class="n">ip_address</span><span class="o">&gt;</span><span class="p">:\</span><span class="n">g</span><span class="o">&lt;</span><span class="n">admin</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'> <span class="p">}</span><span class="n">x</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;users.each do |u|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">r</span> <span class="o">=</span> <span class="n">user_regexp</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;User </span><span class="si">#{</span><span class="n">r</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="si">}</span><span class="s2"> is from </span><span class="si">#{</span><span class="n">r</span><span class="o">[</span><span class="ss">:ip_address</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>小心使用 ^ 和 $ , 它们是来匹配行的开始和结束，不是字符串。 如果你想匹配整个string，则使用 \A和\Z</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;some injection</span><span class="se">\n</span><span class="s2">username&quot;</span>
</span><span class='line'>  <span class="n">string</span><span class="o">[/&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="n">username</span><span class="vg">$/</span><span class="o">]&lt;</span><span class="sr">/sup&gt;   # matches</span>
</span><span class='line'><span class="sr">  string[/</span><span class="p">\</span><span class="no">Ausername</span><span class="p">\</span><span class="n">Z</span><span class="o">/]</span> <span class="c1"># don&#39;t match</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>使用 x 来修饰复杂的正则， 这样更可读，还可加注释，只是需要小心空格</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">regexp</span> <span class="o">=</span> <span class="sr">%r{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;start         # some text</span>
</span><span class='line'><span class="sr">\s            # white space char</span>
</span><span class='line'><span class="sr">(group)       # first group</span>
</span><span class='line'><span class="sr">(?:alt1|alt2) # some alternation</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>百分号字面量 (Percent Literals)</h4>

<hr />

<ul>
<li><p>使用%w毫无压力
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">STATES</span> <span class="o">=</span> <span class="sx">%w(draft open closed)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>使用%()来引用单行字符串，相当于双引号（相当于%Q()），对于多行的字符串，要使用here文档。</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad (no interpolation needed)</span>
</span><span class='line'>  <span class="sx">%(&lt;div class=&quot;text&quot;&gt;Some text&lt;/div&gt;)</span>
</span><span class='line'>  <span class="c1"># should be &#39;&lt;div class=&quot;text&quot;&gt;Some text&lt;/div&gt;&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># bad (no double-quotes)</span>
</span><span class='line'>  <span class="sx">%(This is </span><span class="si">#{</span><span class="n">quality</span><span class="si">}</span><span class="sx"> style)</span>
</span><span class='line'>  <span class="c1"># should be &quot;This is #{quality} style&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># bad (multiple lines)</span>
</span><span class='line'>  <span class="sx">%(&lt;div&gt;</span><span class="se">\n</span><span class="sx">&lt;span class=&quot;big&quot;&gt;</span><span class="si">#{</span><span class="n">exclamation</span><span class="si">}</span><span class="sx">&lt;/span&gt;</span><span class="se">\n</span><span class="sx">&lt;/div&gt;)</span>
</span><span class='line'>  <span class="c1"># should be a heredoc.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good (requires interpolation, has quotes, single line)</span>
</span><span class='line'>  <span class="sx">%(&lt;tr&gt;&lt;td class=&quot;name&quot;&gt;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sx">&lt;/td&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>超过一个/符合的正则应该使用 %r</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># bad</span>
</span><span class='line'>  <span class="sr">%r(\s+)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # still bad</span>
</span><span class='line'><span class="sr">  %r(&lt;sup&gt;/</span><span class="p">(</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="err">$</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">  # should be /</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">\</span><span class="o">/</span><span class="p">(</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="vg">$/</span><span class="o">&lt;</span><span class="sr">/sup&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># good</span>
</span><span class='line'>  <span class="sr">%r(&lt;sup&gt;/blog/2011/(.*)$)</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Above all else</h4>

<hr />

<p>Follow your <img src="https://a248.e.akamai.net/assets.github.com/images/icons/emoji/heart.png?v5" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Edge - 使用Rails来做API-Only App]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/03/12/shi-yong-railslai-zuo-api-only-app/"/>
    <updated>2012-03-12T16:03:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/03/12/shi-yong-railslai-zuo-api-only-app</id>
    <content type="html"><![CDATA[<h4>原文地址:  <a href="https://github.com/rails/rails/blob/efd557a60cd976ac17be9e238111a551599caeb5/railties/guides/source/api_app.textile">点这里</a> 或者 <a href="http://edgeguides.rubyonrails.org/api_app.html">这里Edge Guides</a></h4>

<p><strong> 本文并非原文翻译 </strong></p>

<hr />

<h2>这个导读你会学到：</h2>

<ul>
<li><p>什么是仅提供API的Rails应用</p></li>
<li><p>开始如何配置没有任何浏览器特性的Rails</p></li>
<li><p>如何选择你想包含的middlewares</p></li>
<li><p>如何选择你的controller里使用哪个modules</p></li>
</ul>


<p><strong> 注意： 这个导读引入的特性并没有被全部实现。 先当文档来看 </strong></p>

<h2>什么是一个API app？</h2>

<p>传统意义上来说， 当人们说他用了Rails实现了一个“API”， 意味着他们的web应用提供一个程序可访问的API接口。就像Github提供的<a href="http://developer.github.com/">这个API</a>， 你可以在你自己定制的客户端来使用它。</p>

<p>随着移动互联网时代的到来，以及各种客户端框架的出现， 越来越多的开发者使用Rails来构建后端， 供Web应用和本地应用(Native App)一起使用。例如， Twitter就在Web Application中和其他本地应用客户端（Native App）一样，都消耗着由自己的<a href="https://dev.twitter.com/">公共API</a>提供的JSON资源,  而不是通过Rails生成动态的HTML来渲染用于和Server端通信的表单和链接。大多少开发者都把Web应用当作由HTML， CSS， Javascript构成的另一种客户端来处理，只是通过JSON来通信。</p>

<!--more-->


<h2>为什么使用Rails来提供JSON APIs？</h2>

<p>很多人在使用Rails构建一个JSON API时候思考的第一个问题就是：使用Rails输出JSON是不是有种杀鸡用牛刀的感觉？ 是不是应该用Siantra这类轻量级的框架就好了？</p>

<p>对于简单的API应用， 这些考虑可能适用， 但是复杂的， Rails更适合。</p>

<p>大多数人使用Rails的原因是它提供了默认的套件帮助我们快速的起步不用在烦杂的琐碎的东西上浪费时间。让我们看看适合API应用使用的东西：</p>

<h4>中间件层</h4>

<ul>
<li>Reloading:   R
ails应用支持transparent reloading. 不管是你的应用因为新增了文件变大还是重启了server，它都会工作。</li>
<li>Development Mode: 开发模式。</li>
<li>Test Mode:    测试模式。</li>
<li>Logging:   Rails会详细的记录每次请求的日志信息。开发环境下， Rails记录的信息包含请求的环境，数据库查询和基本的性能等信息。</li>
<li>Security:  Rails有效的防范<a href="http://en.wikipedia.org/wiki/IP_address_spoofing">IP欺诈</a>和<a href="http://en.wikipedia.org/wiki/Timing_attack">时序攻击</a>.</li>
<li>Parameter Parsing:  想要指定你的参数是JSON来代替URL编码字符串吗？没问题， Rails会帮你解码JSON成为你可用的参数。</li>
<li>Conditional GETs:   Rails可以处理条件GET， 操作请求头并且返回正确的响应头和状态码。你可以使用<a href="http://api.rubyonrails.org/classes/ActionController/ConditionalGet.html#method-i-stale-3F">stale?</a>来处理全部HTTP详细信息。</li>
<li>Caching:   Rails让你方便的配置缓存。</li>
<li>HEAD requests:   Rails会透明的把HEAD request转化为GET request， 并只返回header信息。</li>
</ul>


<h4>ActionPack层</h4>

<ul>
<li>Resourceful Routing:  如果你正在构建一个RESTFul的JSON API， 你要用Rails router,   干净利落方便的帮你从HTTP方法映射到Controller。</li>
<li>URL Generation:   Routing对应的是URL Generation。 一个好的API是对HTTP方法友好的URLs， 例如<a href="http://developer.github.com/v3/gists/">Github gist API</a>。</li>
<li>Header and Redirection Responses:    head :no_content 和 redirect_to_user_url(current_user), 这两方法迟早有用。</li>
<li>Content Negotiation: Rails的respond_to和respond_with方法，会自动的根据请求的Accept header和可用类型去提供相应的MIME Type。</li>
<li>Caching:  Rails提供页面， action和片段缓存。 片段缓存有利用构建内嵌的JSON对象。</li>
<li>Basic, Digest and Token Authentication:  Rails支持这三种类型的HTTP验证。</li>
<li>Instrumentation: Rails3.0 提供了一个Instrumentation API用于触发一些注册事件，类似于action处理过程， 发送文件或者数据， 重定向和数据查询等事件,  可用于Notifications等功能。</li>
<li>Generators:  生成器， 对高级别的Rails用户来说没啥用， 但是它可以一键生成相关的资源。</li>
<li>Plugins:   有好多优秀的Rails第三方插件可以拿来用。</li>
</ul>


<h2>基本配置</h2>

<p>如果你正在构建一个基本只提供API服务的Rails应用， 那么你可以从一个定制的Rails子集版本开始， 只添加自己需要的特性。</p>

<h4>你可以直接生成一个bare rails应用：</h4>

<pre><code>$ rails new my_api  -api
</code></pre>

<p>这条命令会帮你生成三条主要的部分：</p>

<ol>
<li>帮你配置包含更少中间件的应用， 尤其是不包含任何和浏览器相关的特性，比如cookie支持等。</li>
<li>使 ApplicationController继承于ApplicationController::API， 而不是ApplicationController::Base.  ApplicationController::API已经剔除了任何包含浏览器相关特性的功能。</li>
<li>配置生成器， 在你生成新的资源的时候，跳过生成views， helpers和assets。</li>
</ol>


<h4>如果你想让已经存在的Rails Application变成一个API App， 那么按下面步骤来做：</h4>

<p><strong> 在config/application.rb中增加下面两行：</strong></p>

<pre><code>config.middleware.api_only!
config.generators.api_only!
</code></pre>

<p><strong> 改变app/controller/application_controller.rb 为下列语句： </strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  # ...</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>选择中间件</h2>

<p>一个API A
pp应该默认包含下面Middlewares：</p>

<ul>
<li>Rack::Cache:   利用Cache-Control机制来缓存响应。</li>
<li>Rack::Sendfile:   提供文件传输支持。</li>
<li>Rack::Lock:  如果你的应用没有标记使用线程安全 (config.threadsafe!), 这个middleware会在你的请求上增加一个互斥锁， 用于保证在任一时刻，只能有一个线程访问改对象。</li>
<li>ActionDispatch::RequestId:</li>
<li>Rails::Rack::Logger:</li>
<li>ActionDispatch::ShowExceptions:</li>
<li>ActionDispatch::DebugExceptions:</li>
<li>ActionDispatch::RemoteIp: IP欺诈保护</li>
<li>ActionDispatch::Reloader: 在开发环境下支持code reloading。</li>
<li>ActionDispatch::ParamsParser: 根据请求类型Content-Type来解析XML, YAML, JSON。</li>
<li>ActionDispatch::Head:  指派HEAD requests为GET requests,并只返回header信息和状态码。</li>
<li>Rack::ConditionalGet:  在Rails controller里支持stale?特性</li>
<li>Rack::ETag:  自动为所有的字符串响应设置ETag。 主要被用来优化客户端。</li>
</ul>


<h4>你可以通过下面命令来列出你应用里用到的所有Middlewares：</h4>

<pre><code>$ rake middleware
</code></pre>

<p>还有一些其他的Middlewares及其说明， 可以查看<a href="https://github.com/rails/rails/blob/efd557a60cd976ac17be9e238111a551599caeb5/railties/guides/source/api_app.textile">原文链接</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solr简要指南]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/03/07/solrjian-yao-zhi-nan/"/>
    <updated>2012-03-07T14:38:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/03/07/solrjian-yao-zhi-nan</id>
    <content type="html"><![CDATA[<h2>一、 安装</h2>

<p>服务器环境， CentOS, 需要的软件有：  jdk 1.6.0 、apache-solr-3.1.0 、apache-tomcat-7.0.26 、 mmseg4j</p>

<h4>Solr与Sphinx相比较的优势：</h4>

<ul>
<li><p> Solr 可以精确控制对索引进行局部更新，而Sphinx只能全局更新.</p></li>
<li><p> Solr 可以对几乎任何对象进行索引，该对象甚至可以不是ActiveRecord.而Sphinx和RDBMS耦合过于紧密.</p></li>
<li><p> Solr 索引的对象ID可以非空或者是字符串，而Sphinx要求被索引对象必须拥有非0整数作为ID.</p></li>
<li><p> Solr 支持Boolean作为查询条件搜索,更加方便</p></li>
<li><p> Solr 支持Facets,而Sphinx为此需要做更多工作</p></li>
<li><p> Solr 是对lucene的包装。所以他可以享受lucene每次升级带来的便利。</p></li>
</ul>


<!--more-->


<h4>安装Java：</h4>

<pre><code>sudo yum install java-1.6.0-openjdk.x86_64
</code></pre>

<h4>下载Solr和Tomcat</h4>

<pre><code>1. wget  http://labs.renren.com/apache-mirror/tomcat/tomcat-7/v7.0.26/bin/apache-tomcat-7.0.26.tar.gz

2. wget http://mirror.bjtu.edu.cn/apache/lucene/solr/3.1.0/apache-solr-3.1.0.tgz
</code></pre>

<p> 下载完之后解压并放到/usr/local下:</p>

<pre><code> tar zxvf apache-solr-3.1.0.tgz
 tar zxvf apache-tomcat-7.0.26.tar.gz
 mv  apache-solr-3.1.0 /usr/local/solr
 mv  apache-tomcat-7.0.26 /usr/local/tomcat
</code></pre>

<h4>下载mmseg4j， 中文分词用。</h4>

<pre><code> 地址： http://code.google.com/p/mmseg4j/downloads/list
</code></pre>

<h2>二、 配置</h2>

<h4>配置环境变量</h4>

<p>编辑profile文件：</p>

<pre><code>sudo vi /etc/profile
</code></pre>

<p>添加内容:</p>

<pre><code>export JAVA_HOME=/usr/lib/jvm/jre-1.6.0
export CLASSPATH=.:$JAVA_HOME/lib/rt.jar
export PATH=$PATH:$JAVA_HOME/bin
export TOMCAT_HOME=/usr/local/tomcat
export JAVA_OPT="$JAVA_OPTS -Dsolr.solr.home=/usr/local/tomcat/solr_home"
</code></pre>

<h4>复制solr.war到tomcat/webapps下面</h4>

<pre><code>cp /usr/local/solr/dist/apache-solr-3.1.0.war /usr/local/tomcat/webapps/solr.war
</code></pre>

<h4>配置solr.xml文件，先创建Catalina/localhost目录：</h4>

<p>编辑文件：</p>

<pre><code> vi /usr/local/tomcat/conf/Catalina/localhost/solr.xml
</code></pre>

<p>添加内容：</p>

<pre><code>&lt;Context docBase="/usr/local/tomcat/webapps/solr.war" debug="0" crossContext="true"&gt;

    &lt;Environment name="solr/home" type="java.lang.String" value="/usr/local/tomcat/solr_home" override="true" /&gt;

&lt;/Context&gt;
</code></pre>

<h4>配置tomcat user</h4>

<p>编辑文件：</p>

<pre><code>vi /usr/local/tomcat/conf/tomcat-users.xml
</code></pre>

<p>去掉注释块,加入以下内容:</p>

<pre><code>&lt;role rolename="admin-gui"/&gt;
&lt;role rolename="admin-script"/&gt;
&lt;role rolename="manager-gui"/&gt;
&lt;role rolename="manager-script"/&gt;
&lt;role rolename="manager-jmx"/&gt;
&lt;role rolename="manager-status"/&gt;
&lt;user username="tomcat" password="123456" roles="manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui"/&gt;
</code></pre>

<p><strong>注意： 这里tomcat/123456 是tomcat的用户名，密码， 在你访问tomcat管理页面的时候需要。</strong></p>

<h4>进入tomcat根目录:</h4>

<p>创建solr_home文件夹. 然后将/usr/local/solr/example/solr下的conf、data、bin三个文件夹复制到solr_home下;</p>

<h4>进入webapps/solr/WEB-INF，打开web.xml，第37行，注释打开，修改如下：</h4>

<pre><code>&lt;env-entry]]]]&gt;  
   &lt;env-entry-name]]]]&gt;solr/home&lt;/env-entry-name]]]]&gt;  
   &lt;env-entry-value]]]]&gt;/usr/local/tomcat/solr_home&lt;/env-entry-value]]]]&gt;  
   &lt;env-entry-type]]]]&gt;java.lang.String&lt;/env-entry-type]]]]&gt;  
 &lt;/env-entry]]]]&gt;
</code></pre>

<h4>解压下载好的mmseg4j-1.8.4.zip:</h4>

<p>复制mmseg4j-all-1.8.4.jar到/usr/local/tomcat/webapps/solr/WEB-INF/lib下</p>

<h4>进入/usr/local/tomcat/solr_home/conf，打开schema.xml, 在<types></types>之间加入：</h4>

<pre><code>&lt;fieldType name="textComplex" class="solr.TextField" ]]&gt;  
&lt;analyzer]]&gt;  
    &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="complex" dicPath="data/"/&gt;  
&lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;  
&lt;fieldType name="textMaxWord" class="solr.TextField" ]]&gt;  
        &lt;analyzer]]&gt;  
           &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="max-word"dicPath="data/"/&gt;  
        &lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;  
&lt;fieldType name="textSimple" class="solr.TextField" ]]&gt;  
        &lt;analyzer]]&gt;  
           &lt;tokenizer class="com.chenlb.mmseg4j.solr.MMSegTokenizerFactory" mode="simple" dicPath="data/"/&gt;  
       &lt;/analyzer]]&gt;  
&lt;/fieldType]]&gt;
</code></pre>

<h4>然后在解压好的mmseg4j文件夹中找到data文件夹</h4>

<p>将其内的chars.dic、units.dic、words.dic三个字典文件复制到/usr/local/tomcat/solr_home/data中</p>

<h4>启动tomcat</h4>

<pre><code>/usr/local/tomcat/bin/startup.sh
</code></pre>

<p><strong>当然你也可以自己写启动脚本</strong></p>

<h4>检测</h4>

<p>访问 http://localhost:8080/manager/status  输入之前的用户名和密码，就可以看到正常的tomcat首页，然后访问http://localhost:8080/solr/admin/analysis.jsp，选择Field下拉选项中的type，后面输入textComplex，然后在Field value中随便复制一段中文文字，点击Analyz，就可以看到mmseg4j的分词结果了。</p>

<h4>配置 solrconfig.xml ,   打开 /usr/local/tomcat/solr_admin/conf/solrconfig.xml :</h4>

<pre><code> &lt;dataDir&gt;${solr.data.dir:/usr/local/tomcat/solr_home/data}&lt;/dataDir&gt;
</code></pre>

<p>添加auto_commit配置， 找到<updateHandler class="solr.DirectUpdateHandler2">位置， 打开注释：</p>

<pre><code>&lt;autoCommit&gt; 
    &lt;maxDocs&gt;10000&lt;/maxDocs&gt;
    &lt;maxTime&gt;1000&lt;/maxTime&gt; 
&lt;/autoCommit&gt;
</code></pre>

<p><strong>说明：</strong></p>

<ul>
<li><p>maxDocs：当内存索引数量达到指定值的时候，将内存的索引DUMP到硬盘中，并通知searcher类加载新的索引。</p></li>
<li><p>maxTime:每隔指定的时间段，自动的COMMIT内存中的索引数据，并通知Searcher类加载新的索引。</p></li>
<li><p>以上两种方式，以最先达到条件执行为准。</p></li>
</ul>


<h2>三、 Rails</h2>

<h4><a href="http://sunspot.github.com/">Sunspot</a></h4>

<h4><a href="https://github.com/outoftime/sunspot/tree/master/sunspot_rails">sunspot_rails</a></h4>

<h4>与Model集成示例：</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>post.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Post &amp;lt;&amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  has_many :links&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">searchable</span> <span class="ss">:auto_index</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:auto_remove</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;text :ab  #可以被fulltext或者keywords搜索出来。btw,ywords是fulltext的别名。其实是同一个方法。</span>
</span><span class='line'><span class="sr">string :location</span>
</span><span class='line'><span class="sr">integer :blog_id</span>
</span><span class='line'><span class="sr">boolean :generated   #支持boolean查询</span>
</span><span class='line'><span class="sr">time :published_at, :stored =&amp;gt; true</span>
</span><span class='line'><span class="sr">text :links do   # 支持这种虚拟属性。</span>
</span><span class='line'><span class="sr">  links.map { |link| link.url + &quot; &quot; + link.title }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong> 请留意auto_index,auto_remove,配置了这两个选项以后，程序就能够自动检测程序，数据是否变得脏了。数据脏又分为dirty?和delete_dirty?,自动方式会自动根据这两种脏脏状态决定是否自动更新索引,还是自动删除。如果这两个选项被设置成false,那么就需要你手动更新索引。 </strong></p>

<h4>增量更新：</h4>

<p><strong> sunspot会将新增、更新的记录发送至solr，但不会发送commit(只有运行reindex才会发送commit命令,  只有commit之后， 索引才会发生变化)， 可以配置 solr/conf/solrconfig.xml ，启用 autoCommit 参数，设置更新的记录数或者时间(ms)， 更新时如果 solr 服务出问题，则会导致rails操作不成功，所以要把更新操作放到resque后台执行， 这里使用<a href="http://stdout.heyzap.com/2011/08/17/sunspot-resque-session-proxy/">Sunspot-Resque Session Proxy</a> </strong></p>

<h4>关于solr中commit和optimize的概念:</h4>

<pre><code>-    commit

   当你像solr提交索引更新时，只有运行了commit，索引才会发生变化。              
   当然也并不意味着你每次提交都要commit，如果不是那么紧急，你可以多次提交之后，再执行commit操作。

-   optimize

   optimize有点像硬盘上整理磁盘碎片的操作。       
   为了提高搜索速度，它会将索引重组在一起，然后移除需要被删除删除或是更新的文档，请注意，solr是没有update的这种操作的，只有增加与删除。       
   solr在优化时，将需要删除或是被替换的索引标记为deleted，然后再创建新的文档替换掉需要被替换的。optimize就是执行此操作。       
   所以在优化的时候，你的索引会增大，然后再减小。optimize操作会创建一个全新的的索引结构，所以，你需要预备出2倍于你commit时索引大小的空间。
</code></pre>

<h2>参考资料：</h2>

<p> <a href="http://wiki.apache.org/solr/SolrTomcat">SolrTomcat Wiki</a></p>

<p> <a href="http://asciicasts.com/episodes/278-search-with-sunspot">Episodes 278</a></p>

<p> <a href="http://stdout.heyzap.com/2011/08/17/sunspot-resque-session-proxy/">Sunspot-Resque Session Proxy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bcrypt与密码安全]]></title>
    <link href="http://ZhangHanDong.github.com/blog/2012/01/05/bcryptyu-mi-ma-an-quan/"/>
    <updated>2012-01-05T17:30:00+08:00</updated>
    <id>http://ZhangHanDong.github.com/blog/2012/01/05/bcryptyu-mi-ma-an-quan</id>
    <content type="html"><![CDATA[<p>最近闹的沸沸扬扬的各大网站用户密码泄露事件， 让网民们震惊了，尽然都是明文保存密码。因为存在某些漏洞，比如sql注入， 可能让Hacker拿到全字段的数据列表，如果是明文密码， 那就帮Hacker省事了， Hacker都不需要暴力破解了。</p>

<p>其实对于密码有很多加密手段，但是最安全的莫过于Bcrypt这种算法了， 详细的参看<a href="http://codahale.com/how-to-safely-store-a-password/">Coda Hala的这篇文章</a>, 也有<a href="http://coolshell.cn/articles/2078.html/comment-page-2#comment-121752">中文版</a>。 其实安全也是相对的， 对于Bcrypt这种算法的优势再于它的慢， 延缓了Hacker暴力破解的时间， 对于用户来说，就相对安全了。</p>

<p>用Rails的同学就有福了。 <a href="https://github.com/plataformatec/devise">devise</a>默认就是支持Bcrypt的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>initializers/devise.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">stretches</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的stretches被用来做work factor, 数值越大越慢， 如果你发现一个crypt生成值在20毫秒之内，那这个stretches就正好。</p>

<p>另一个措施就是可以在用户输入12345之类的弱密码的时候，禁止其注册，并提示其使用强度比较高的密码。</p>
]]></content>
  </entry>
  
</feed>
